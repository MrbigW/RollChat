package com.wrk.rollchat.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wrk.rollchat.model.bean.InvitationStatus;
import com.wrk.rollchat.model.bean.InvitationStatusConverter;

import com.wrk.rollchat.model.bean.InvitationInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVITATION_INFO".
*/
public class InvitationInfoDao extends AbstractDao<InvitationInfo, String> {

    public static final String TABLENAME = "INVITATION_INFO";

    /**
     * Properties of entity InvitationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_hxid = new Property(0, String.class, "user_hxid", true, "USER_HXID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property Group_hxid = new Property(2, String.class, "group_hxid", false, "GROUP_HXID");
        public final static Property Group_name = new Property(3, String.class, "group_name", false, "GROUP_NAME");
        public final static Property InvatePerson = new Property(4, String.class, "invatePerson", false, "INVATE_PERSON");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    }

    private final InvitationStatusConverter statusConverter = new InvitationStatusConverter();

    public InvitationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public InvitationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVITATION_INFO\" (" + //
                "\"USER_HXID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_hxid
                "\"USER_NAME\" TEXT," + // 1: user_name
                "\"GROUP_HXID\" TEXT," + // 2: group_hxid
                "\"GROUP_NAME\" TEXT," + // 3: group_name
                "\"INVATE_PERSON\" TEXT," + // 4: invatePerson
                "\"REASON\" TEXT," + // 5: reason
                "\"STATUS\" TEXT);"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVITATION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InvitationInfo entity) {
        stmt.clearBindings();
 
        String user_hxid = entity.getUser_hxid();
        if (user_hxid != null) {
            stmt.bindString(1, user_hxid);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String group_hxid = entity.getGroup_hxid();
        if (group_hxid != null) {
            stmt.bindString(3, group_hxid);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(4, group_name);
        }
 
        String invatePerson = entity.getInvatePerson();
        if (invatePerson != null) {
            stmt.bindString(5, invatePerson);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        InvitationStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InvitationInfo entity) {
        stmt.clearBindings();
 
        String user_hxid = entity.getUser_hxid();
        if (user_hxid != null) {
            stmt.bindString(1, user_hxid);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String group_hxid = entity.getGroup_hxid();
        if (group_hxid != null) {
            stmt.bindString(3, group_hxid);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(4, group_name);
        }
 
        String invatePerson = entity.getInvatePerson();
        if (invatePerson != null) {
            stmt.bindString(5, invatePerson);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        InvitationStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, statusConverter.convertToDatabaseValue(status));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InvitationInfo readEntity(Cursor cursor, int offset) {
        InvitationInfo entity = new InvitationInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_hxid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_hxid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // group_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // invatePerson
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reason
            cursor.isNull(offset + 6) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 6)) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InvitationInfo entity, int offset) {
        entity.setUser_hxid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroup_hxid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInvatePerson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InvitationInfo entity, long rowId) {
        return entity.getUser_hxid();
    }
    
    @Override
    public String getKey(InvitationInfo entity) {
        if(entity != null) {
            return entity.getUser_hxid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InvitationInfo entity) {
        return entity.getUser_hxid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
