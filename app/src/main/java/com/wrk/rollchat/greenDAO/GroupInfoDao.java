package com.wrk.rollchat.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wrk.rollchat.model.bean.GroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_INFO".
*/
public class GroupInfoDao extends AbstractDao<GroupInfo, Void> {

    public static final String TABLENAME = "GROUP_INFO";

    /**
     * Properties of entity GroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupName = new Property(0, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupId = new Property(1, String.class, "groupId", false, "GROUP_ID");
        public final static Property InvatePerson = new Property(2, String.class, "invatePerson", false, "INVATE_PERSON");
    }


    public GroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_INFO\" (" + //
                "\"GROUP_NAME\" TEXT," + // 0: groupName
                "\"GROUP_ID\" TEXT," + // 1: groupId
                "\"INVATE_PERSON\" TEXT);"); // 2: invatePerson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(1, groupName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
 
        String invatePerson = entity.getInvatePerson();
        if (invatePerson != null) {
            stmt.bindString(3, invatePerson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupInfo entity) {
        stmt.clearBindings();
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(1, groupName);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
 
        String invatePerson = entity.getInvatePerson();
        if (invatePerson != null) {
            stmt.bindString(3, invatePerson);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupInfo readEntity(Cursor cursor, int offset) {
        GroupInfo entity = new GroupInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // invatePerson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupInfo entity, int offset) {
        entity.setGroupName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInvatePerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
